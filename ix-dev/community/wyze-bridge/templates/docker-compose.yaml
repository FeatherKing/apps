{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.wyzebridge_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}
{% do c1.add_caps(["CHOWN", "DAC_OVERRIDE", "FOWNER", "KILL", "SETGID", "SETUID"])%}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
# need to test customizing the backend port. didnt work on my first attempt
{% do c1.set_command(["flask", "run", "--host", "0.0.0.0", "--port", values.network.web_port.port_number]) %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
{% if values.ci %}
  {% do c1.healthcheck.disable() %}
{% else %}
  {% do c1.healthcheck.set_test("tcp", {"port": values.network.web_port.port_number}) %}
{% endif %}

{% if values.wyzebridge.wb_auth %}
{% do c1.environment.add_env("WB_AUTH", values.wyzebridge.wb_auth) %}
{% do c1.environment.add_env("WB_USERNAME", values.wyzebridge.wb_username) %}
{% do c1.environment.add_env("WB_PASSWORD", values.wyzebridge.wb_password) %}
{% endif %}

{% do c1.environment.add_user_envs(values.wyzebridge.additional_envs) %}

{% do c1.add_port(values.network.web_port) %}
{% do c1.add_port(values.network.rtmp_port, {"container_port": values.consts.internal_rtmp_port}) %}
{% do c1.add_port(values.network.rtsp_port, {"container_port": values.consts.internal_rtsp_port}) %}
{% do c1.add_port(values.network.hls_port, {"container_port": values.consts.internal_hls_port}) %}
{% do c1.add_port(values.network.webrtc_port, {"container_port": values.consts.internal_webrtc_port}) %}
{% do c1.add_port(values.network.webrtcice_port, {"container_port": values.consts.internal_webrtcice_port, "protocol": "udp"}) %}

{% do c1.add_storage(values.consts.data_path, values.storage.data) %}
{% do perm_container.add_or_skip_action("data", values.storage.data, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port.port_number}) %}
{% do tpl.notes.set_body(values.consts.notes_body) %}

{{ tpl.render() | tojson }}
